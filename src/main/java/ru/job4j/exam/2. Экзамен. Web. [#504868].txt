Http протокол:
1. Расскажите, чем отличается UDP от TCP/IP.
    TCP/IP:
    - гарантирует что получатель получит все отправленные данные, т.к. каждый пакет проходит через тройное рукопожатие:
    SYN -> SYN/ACK -> ACK
    - Контроль ошибок, повторная отправка пакетов в случает потерь или повреждений + соблюдения порядка пакетов
    - медленнее, т.к. имеются накладные расходы на установку соединения + тратится время на достижение максимальной
    пропускной способности получателя
    - используется в HTTP/HTTPS, SMTP, FTP и тд

    UDP:
    - нет гарантий доставки пакетов
    - нет контроля ошибок
    - за счет отсутствия накладных расходов - очень быстрый
    - используется в стримминге, VoIP, DNS запросы и тд.

    Когда TCP быстрее UDP (Раздел "Особенности двух транспортных протоколов")
    https://habr.com/ru/companies/ruvds/articles/598615/
---
---

2. Расскажите о методах HTTP протокола. Подробно рассказать отличие в заголовке и теле запросов: GET, POST, PUT, DELETE.
    GET:
    •	GET-запрос отправляется с минимальной информацией в заголовках. Заголовок содержит основную информацию, такую как:
    	•	Request-Line: указывает метод (GET), путь к ресурсу и версию протокола HTTP.
    	•	Host: указывает домен сервера.
    	•	User-Agent: информация о клиенте, который делает запрос.
    	•	Accept: указывает типы данных, которые клиент может обработать (например, text/html, application/json).
    	•	Cache-Control: директивы управления кэшированием.
    	•	Authorization: если требуется аутентификация, заголовок будет содержать данные для авторизации.
    	•	Cookies: отправка сессий или другой информации в виде куки-файлов.
    •	Тело:
    	•	GET-запросы не имеют тела. Вся информация, необходимая для обработки запроса, передается через URL
    	(например, параметры в строке запроса ?key=value).

    POST:
    •	POST-запросы имеют более сложные заголовки, так как предполагается передача данных на сервер. Основные заголовки:
    	•	Request-Line: метод (POST), путь и версия HTTP.
    	•	Host, User-Agent, Accept: те же, что и в GET-запросах.
    	•	Content-Type: определяет тип данных, передаваемых в теле запроса
    	(например, application/json, application/x-www-form-urlencoded, multipart/form-data).
    	•	Content-Length: указывает длину тела запроса.
    	•	Authorization, Cookies: аналогично GET-запросу, если требуется.
    •	Тело:
    	•	В теле POST-запроса передаются данные, которые сервер должен обработать. Это может быть:
    	•	JSON: { “key”: “value” }
    	•	Форма (application/x-www-form-urlencoded): key=value&key2=value2
    	•	Файлы (multipart/form-data): используется для отправки файлов на сервер.
    PUT:
    •	Заголовки PUT-запроса схожи с заголовками POST-запроса, поскольку PUT также используется для передачи данных на сервер.
    	•	Request-Line: метод (PUT), путь и версия HTTP.
    	•	Host, User-Agent, Accept, Content-Type, Content-Length, Authorization, Cookies: аналогично POST-запросу.
    •	Тело:
    	•	PUT-запрос обычно используется для обновления существующего ресурса или создания нового.
    	В теле запроса передаются данные ресурса, которые будут заменены или созданы на сервере.
    	Структура данных такая же, как в POST (JSON, XML, и т.д.).
    	•	В отличие от POST, PUT-запрос предполагает идемпотентность, то есть повторный запрос с одинаковыми данными
    	не должен менять состояние ресурса.
    DELETE:
    •	Заголовки DELETE-запроса минимальны и аналогичны GET-запросу:
    	•	Request-Line: метод (DELETE), путь и версия HTTP.
    	•	Host, User-Agent, Accept, Authorization, Cookies: стандартные заголовки, как в GET-запросах.
    •	Тело:
    	•	DELETE-запрос обычно не имеет тела. Вся информация для удаления ресурса передается через URL
    	(например, идентификатор ресурса в пути).
    Типы HTTP-запросов и философия REST (Раздел "Ресурсы и методы")
    https://habr.com/ru/articles/50147/
---
---

3. Расскажите о статусах HTTP протокола.
    Статусов очень много, поэтому приведу основные:
    - 200 OK
    - 201 - часто используют вместо 200
    - 301 - если используется перенаправление
    - 400 - Bad Request
    - 401 - Unauthorized
    - 403 - Forbidden
    - 404 - Not Found
    - 405 - Method Not Allowed
    - 418 - крутая штука для сокрытия реальной кода
    - 500 - Internal Server Error
    - 502 - Bad Gateway
    - 503 - Service Unavailable
    - 504 - Gateway Timeout
    Список кодов состояния HTTP
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP
4. Расскажите о mime-type HTTP протокола.
    Я сталкивался только с двумя:
    application/json для отправки json и multipart/mixed - для отправки email
    Вообще их вот столько:
    application;
    audio;
    example;
    image;
    message;
    model;
    multipart;
    text;
    video.
    Список MIME-типов
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_MIME-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2

---
---

Веб-контейнер:
1. Что такое сервлет?
    Это интерфейс в java, взаимодействует с с клиентами посредством принципа запрос-ответ.

    Жизненный цикл сервлета состоит из следующих шагов:

    - В случае отсутствия сервлета в контейнере.
        1) Класс сервлета загружается контейнером.
        2) Контейнер создаёт экземпляр класса сервлета.
        3) Контейнер вызывает метод init(). Этот метод инициализирует сервлет и вызывается в первую очередь, до того, как сервлет сможет обслуживать запросы.
        За весь жизненный цикл метод init() вызывается только один раз.
    - Обслуживание клиентского запроса:
    Каждый запрос обрабатывается в своём отдельном потоке. Контейнер вызывает метод service() для каждого запроса.
    Этот метод определяет тип пришедшего запроса и распределяет его в соответствующий этому типу метод для обработки запроса.
    Разработчик сервлета должен предоставить реализацию для этих методов. Если поступил запрос, метод для которого не реализован,
    вызывается метод родительского класса и обычно завершается возвращением ошибки инициатору запроса.
    - В случае если контейнеру необходимо удалить сервлет, он вызывает метод destroy(), который снимает сервлет из эксплуатации.
    Подобно методу init(), этот метод тоже вызывается единожды за весь цикл сервлета.
    Сервлет (Java) Wiki https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%80%D0%B2%D0%BB%D0%B5%D1%82_(Java)
    Документация Servlet
---
---

2. Какова структура веб-проекта?
    в учебе мы используем следующую структуру:
    db/
    src/main/
        java/*/
            config
            controller
            model
            repository
            service
        resources/
            static
            templates
            props
    src/test
        java/*/packetsForTests
        resources/prop
    Introduction to the Standard Directory Layout
---
---

3. Что такое контейнер сервлетов?

    Контейнер сервлетов Wiki
    https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80_%D1%81%D0%B5%D1%80%D0%B2%D0%BB%D0%B5%D1%82%D0%BE%D0%B2
4. Каковы задачи, функциональность контейнера сервлетов?
    Контейнер сервлетов Wiki
5. Что вы знаете о сервлет фильтрах?
    Использование фильтра сервлетов для «всплытия» страницы из фрейма
    The Essentials of Filters
6. Зачем нужны слушатели в сервлетах?
7. Когда вы будете использовать фильтры, а когда слушатели?
8. Как обработать исключения, выброшенные другим сервлетом в приложении?
9. Что такое дескриптор развертывания?
    Дескриптор развёртывания Wiki
10. Как реализовать запуск сервлета с запуском приложения?
11. Что представляет собой объект ServletConfig?
12. Что представляет собой объект ServletContext?
13. В чем отличия ServletContext и ServletConfig?
14. Что такое Request Dispatcher?
Thymeleaf:
1. Расскажите о назначении Thymeleaf?
    Учебник Thymeleaf: Глава 1. Знакомство
2. Расскажите про тег th:text.
    Учебник Thymeleaf: Глава 3. Использование Text
3. Расскажите про тег th:if.
    Учебник Thymeleaf: Глава 7. Условное выполнение
4. Расскажите про тег th:href.
    Учебник Thymeleaf: Глава 4. Standard Expression Syntax (Раздел "4.4. Link URL")
5. Расскажите про тег th:each.
    Учебник Thymeleaf: Глава 6.Итерации
6. Расскажите про тег th:object.
    Руководство: Thymeleaf + Spring. Часть 2 (Раздел "6.1 Обработка командного объекта")
7. Расскажите про тег th:action.
    Учебник Thymeleaf: Глава 5 Установка значений атрибутов (Раздел "5.2. Установка значения для определенных атрибутов")
Spring boot:
1. Опишите из каких компонентов состоит Spring boot?
    Введение в Spring Boot: создание простого REST API на Java
2. Что такое контроллер и как он связан с DispatcherServlet.
    Spring MVC — основные принципы (Раздел "DispatcherServlet")
3. Что такое стереотипные аннотации? Какие они бывают?
    Подготовка к Spring Professional Certification. Контейнер, IoC, бины (Вопрос "Что такое stereotypes")
4. Что такое DI? Как он реализован в Spring?
    Обратная сторона Spring
5. Опишите аннотации @ModelAttribute, @PathVariable, @RequestParam
    Spring MVC: создание веб-сайтов и RESTful сервисов (Разделы "@PathVariable" и "@RequestParam")
    Spring MVC: создание веб-сайтов и RESTful сервисов (Разделы "@GetMapping" и "Как вы можете управлять загрузкой файлов")
    Подготовка к Spring Professional Certification. Spring REST (Вопрос "Что за аннотации @GetMapping, @PostMapping")
Многопоточность:
1. Объясните, где в веб приложении появляется многопоточность?
    Конкуренция в сервлетах (Раздел "Обзор")
2. Как избежать проблем в многопоточности?
3. Как можно создать блокировку (deadlock) в сервлете?
4. Как решать проблемы многопоточности на уровне базы данных?
Архитектура:
1. Объясните слоеную архитектуру.
2. Объясните шаблон MVC на примере Servlet.
3. Объясните шаблон MVC на примере Spring boot.
    Spring MVC — основные принципы
База данных.
1. Зачем нужен пул соединений?
    Пулы соединений к БД — зачем и почему
Безопасность.
1. Что такое HttpSession?
    Spring MVC: создание веб-сайтов и RESTful сервисов (Раздел "Как получить доступ к текущей HttpSession пользователя")
    Документация HttpSession
2. Что такое авторизация?
    Авторизация Wiki
3. Что такое аутентификация?
    Аутентификация Wiki
4. Что такое cookie?
    «Осторожно, печеньки!»: советы начинающим тестировщикам в сфере безопасности (Раздел "Что хранят cookie")
    Cookie Wiki
6. Опишите аннотации @GetMapping, @PostMapping.
