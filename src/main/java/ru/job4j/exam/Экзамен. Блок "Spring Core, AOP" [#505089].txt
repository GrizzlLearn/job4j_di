##### Основы Spring и его компоненты

**1. Что такое Spring? Какие основные задачи выполняет этот фреймворк?**

Spring — это мощный, комплексный фреймворк для разработки приложений на языке Java. Его основными задачами являются:

• Обеспечение контейнера для управления жизненным циклом объектов (бинов).

• Реализация внедрения зависимостей (Dependency Injection, DI), что упрощает создание и тестирование приложений.

• Поддержка аспектно-ориентированного программирования (AOP) для разделения кода на аспекты, такие как логирование и управление транзакциями.

• Обеспечение абстракций для доступа к данным и управления транзакциями.

• Интеграция с различными технологиями и фреймворками.
---
---

**2. Перечислите основные модули Spring фреймворка.**

Основные модули Spring включают:

• **Spring Core**: Основные компоненты, такие как IoC Container и BeanFactory.

• **Spring AOP**: Поддержка аспектно-ориентированного программирования.

• **Spring Data**: Упрощает доступ к данным и работу с JPA, JDBC и другими технологиями.

• **Spring MVC**: Поддержка Model-View-Controller архитектуры для веб-приложений.

• **Spring Security**: Обеспечение безопасности приложений.

• **Spring Boot**: Автоматическая конфигурация и быстрое создание готовых к использованию приложений.

• **Spring Cloud**: Инструменты для разработки распределенных систем и микросервисов.
---
---

**3. Что такое Spring Bean?**

Spring Bean — это объект, который инициализируется, настраивается и управляется контейнером IoC (Inversion of Control) Spring.
---
---

**4. Когда необходимо объект делать бином?**

Объект нужно делать бином, когда он должен управляться контейнером Spring, то есть его жизненный цикл, конфигурация и зависимости будут контролироваться фреймворком.
---
---

**5. Какие существуют способы создания бинов? Чем они друг от друга отличаются?**

Есть **три** варианта.

**XML-based configuration**. В этом случае конфигурация описывается в **xml**\-файле, код java-классов получается отделен от фреймворка - в них нет ни аннотаций, ни иных указаний на Spring. Этот вариант конфигурирования применялся с самого начала возникновения Spring и сейчас считается устаревшим.

**Annotation-based** **configuration**. В этом случае конфигурация описывается в **xml**\-файле, но <u><i>часть бинов может быть описана</i></u> стереотипными аннотациями в java-коде, и в xml-файле указываются пакеты, в которых эти классы находятся.

**Java-based configuration**. Это современный подход, в котором <u><i>отсутствует конфигурационный xml-файл</i></u>, а вся конфигурация контекста описывается **аннотациями в java-коде** классов. 
---
---

**6. Опишите стратегию нейминга (присвоения имени бину) в Spring.**

Имя бину присваивается автоматически на основе класса (имя класса с первой маленькой буквой) или явно с помощью аннотаций @Component(“customName”) или @Bean(“customName”).
---
---

**7. Каким образом можно самостоятельно присвоить имя бину?**

Имя бину можно присвоить с помощью аннотаций:

• @Component(“customName”)

• @Service(“customName”)

• @Repository(“customName”)

• @Controller(“customName”)

• @Bean(“customName”) в конфигурационном классе.
---
---

##### IoC и DI

**8. Что такое IoC и DI? В чем отличие этих терминов?**

• **IoC (Inversion of Control)** — принцип, при котором контроль над созданием и управлением объектами передается контейнеру.

• **DI (Dependency Injection)** — конкретная реализация IoC, при которой зависимости объектов передаются контейнером.
---
---

**9. Перечислите способы внедрения зависимостей и объясните их отличия друг от друга.**

• **Конструкторное внедрение**: Зависимости передаются через конструктор. Преимущества: неизменяемость полей, возможность тестирования.

• **Сеттерное внедрение**: Зависимости передаются через сеттеры. Преимущества: гибкость конфигурации, возможность изменения зависимостей.

• **Поле**: Зависимости внедряются напрямую в поля с помощью аннотаций. Преимущества: простота, но снижает тестируемость и управляемость.

**10. Что такое фабрика бинов (BeanFactory)?**
`BeanFactory` — это центральный интерфейс контейнера IoC (Inversion of Control) в Spring, который обеспечивает механизм управления бинами. Он представляет собой основу для более сложных контейнеров, таких как `ApplicationContext`. Основная роль `BeanFactory` заключается в создании и управлении экземплярами бинов, а также в разрешении их зависимостей.
---
---

**11. Что такое ApplicationContext? Когда он создается?**

`ApplicationContext` — это интерфейс в Spring, который расширяет возможности `BeanFactory`, предоставляя дополнительные функции и услуги для построения сложных приложений. Он является центральным интерфейсом для работы с контейнером IoC (Inversion of Control) в Spring.
Создается при старте приложения
---
---

**12. С какой целью выполняется конфигурирование контекста, какими способами это конфигурирование может производиться и какие отличия есть между ними.**

**Цели конфигурирования контекста**

1. **Управление зависимостями (Dependency Management):** Обеспечение автоматического связывания зависимостей между объектами.

2. **Жизненный цикл бинов (Bean Lifecycle):** Управление процессами создания, инициализации и уничтожения бинов.

3. **Настройка параметров (Configuration Parameters):** Задание параметров конфигурации для различных аспектов приложения.

4. **Разделение конфигурации и логики (Separation of Configuration and Logic):** Позволяет отделить настройки и зависимости от бизнес-логики приложения, делая код более модульным и управляемым.

5. **Масштабируемость и гибкость (Scalability and Flexibility):** Обеспечение возможности легко изменять и настраивать компоненты приложения по мере роста и изменения требований.

XML-based configuration
Annotation-based configuration
Java-based configuration
---
---

**13. Что такое бины Singleton и Prototype в Spring, и в чем разница между ними?**

**Singleton** — это режим по умолчанию для бинов в Spring. В этом режиме контейнер Spring создает только один экземпляр бина для каждого определенного бина в контейнере.

• Этот единственный экземпляр используется для всех запросов на внедрение зависимости.

**Prototype** — это режим, при котором контейнер Spring создает новый экземпляр бина при каждом запросе на внедрение зависимости.

• Каждый раз, когда бин запрашивается из контейнера, создается новый экземпляр.

**Разница между Singleton и Prototype**

1. **Количество экземпляров:**

• **Singleton:** Один экземпляр на контейнер Spring.

• **Prototype:** Новый экземпляр при каждом запросе.

2. **Жизненный цикл:**

• **Singleton:** Контейнер управляет полным жизненным циклом бина, от создания до уничтожения.

• **Prototype:** Контейнер управляет созданием, но не управляет уничтожением или последующими действиями.

3. **Использование:**

• **Singleton:** Подходит для состояния, общего для всего приложения, или для бинов, которые не зависят от специфического состояния.

• **Prototype:** Подходит для состояния, уникального для каждого использования, или для бинов с коротким сроком жизни.
---
---

**14. Как управлять транзакциями в Spring? Объясните использование аннотации @Transactional.**

Этой аннотацией обозначают или метод или класс которым необходимо транзакционное управление

Если обозначен только метод - то будет только метод
Если класс - все методы класса
У Transactional есть атрибуты:
1. **propagation**:
• Определяет поведение транзакции в отношении существующих транзакций.
2. **isolation**:
• Определяет уровень изоляции транзакции.
3. **timeout**:
• Устанавливает время ожидания завершения транзакции в секундах.
4. **readOnly**:
• Указывает, что транзакция только для чтения.
5. **rollbackFor** и **noRollbackFor**:
• Определяет, при каких исключениях нужно откатывать транзакцию.
---
---

**15. Объясните различия между использованием Java Config и XML Config для определения бинов. В каких случаях предпочтительно использовать один способ перед другим?**

**XML Config** - полностью отдельный XML файл
**Java Config** - использует аннотацию Configuration

**Когда использовать Java Config:**

1. **Небольшие проекты**: Для небольших проектов, где конфигурация относительно проста, Java Config обеспечивает легкость и скорость разработки.

2. **Современные проекты**: Современные проекты, использующие Spring Boot, по умолчанию используют Java Config.

3. **Интенсивное использование DI**: В проектах с интенсивным использованием Dependency Injection Java Config обеспечивает лучшую поддержку и читаемость.

4. **Динамическая конфигурация**: Если конфигурация зависит от условий выполнения, Java Config позволяет использовать возможности языка Java для создания динамических конфигураций.

**Когда использовать XML Config:**

1. **Большие корпоративные проекты**: В крупных проектах, где конфигурация может быть очень сложной и изменяемой независимо от кода.

2. **Проекты с разными командами**: В проектах, где конфигурация и разработка кода выполняются разными командами, XML может быть более удобным для управления.

3. **Унаследованные проекты**: В проектах, которые уже используют XML Config и где изменение на Java Config требует значительных затрат времени и ресурсов.

4. **Интеграция с другими системами**: В случаях, когда требуется интеграция с системами, использующими XML для обмена конфигурациями.
---
---

**16. Что такое ленивое создание (lazy initialization) бинов в Spring, и как его настроить?**

**Бин** будет создан и инициализирован контейнером Spring только тогда, когда он впервые потребуется, а не при старте приложения.

1) На уровне класса или метода **@Lazy**
2) На уровне зависимости
```java
public MyService(@Lazy MyLazyBean myLazyBean) {
	this.myLazyBean = myLazyBean;
}
```
3) XML-конфигурация
```xml
<bean id="myLazyBean" class="com.example.MyLazyBean" lazy-init="true"/>
```

4) глобальная настройка
**java**
```java
@Configuration
@Lazy
public class AppConfig {
    // Здесь можно определить бины
}
```
**xml**
```xml
<beans default-lazy-init="true">
     <!-- Здесь можно определить бины -->
</beans>
```
