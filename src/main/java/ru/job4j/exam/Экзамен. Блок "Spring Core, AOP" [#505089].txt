##### Основы Spring и его компоненты

1. Что такое Spring? Какие основные задачи выполняет этот фреймворк?

Spring — это мощный, комплексный фреймворк для разработки приложений на языке Java. Его основными задачами являются:
    • Обеспечение контейнера для управления жизненным циклом объектов (бинов).
    • Реализация внедрения зависимостей (Dependency Injection, DI), что упрощает создание и тестирование приложений.
    • Поддержка аспектно-ориентированного программирования (AOP) для разделения кода на аспекты, такие как логирование и управление транзакциями.
    • Обеспечение абстракций для доступа к данным и управления транзакциями.
    • Интеграция с различными технологиями и фреймворками.
---
---

2. Перечислите основные модули Spring фреймворка.

Основные модули Spring включают:

    • Spring Core: Основные компоненты, такие как IoC Container и BeanFactory.
    • Spring AOP: Поддержка аспектно-ориентированного программирования.
    • Spring Data: Упрощает доступ к данным и работу с JPA, JDBC и другими технологиями.
    • Spring MVC: Поддержка Model-View-Controller архитектуры для веб-приложений.
    • Spring Security: Обеспечение безопасности приложений.
    • Spring Boot: Автоматическая конфигурация и быстрое создание готовых к использованию приложений.
    • Spring Cloud: Инструменты для разработки распределенных систем и микросервисов.
---
---

3. Что такое Spring Bean?

    Spring Bean — это объект, который инициализируется, настраивается и управляется контейнером IoC (Inversion of Control) Spring.
---
---

4. Когда необходимо объект делать бином?

    бъект нужно делать бином, когда он должен управляться контейнером Spring, то есть его жизненный цикл, конфигурация и зависимости будут контролироваться фреймворком.
---
---

5. Какие существуют способы создания бинов? Чем они друг от друга отличаются?

Есть три варианта.

    XML-based configuration. В этом случае конфигурация описывается в xml-файле, код java-классов получается отделен от фреймворка - в них нет ни аннотаций, ни иных указаний на Spring.
    Этот вариант конфигурирования применялся с самого начала возникновения Spring и сейчас считается устаревшим.
    Annotation-based configuration. В этом случае конфигурация описывается в xml-файле, но часть бинов может быть описана стереотипными аннотациями в java-коде, и в xml-файле указываются пакеты, в которых эти классы находятся.
    Java-based configuration. Это современный подход, в котором отсутствует конфигурационный xml-файл, а вся конфигурация контекста описывается аннотациями в java-коде классов.
---
---

6. Опишите стратегию нейминга (присвоения имени бину) в Spring.

    Имя бину присваивается автоматически на основе класса (имя класса с первой маленькой буквой) или явно с помощью аннотаций @Component(“customName”) или @Bean(“customName”).
---
---

7. Каким образом можно самостоятельно присвоить имя бину?

Имя бину можно присвоить с помощью аннотаций:

    • @Component(“customName”)
    • @Service(“customName”)
    • @Repository(“customName”)
    • @Controller(“customName”)
    • @Bean(“customName”) в конфигурационном классе.
---
---

##### IoC и DI

8. Что такое IoC и DI? В чем отличие этих терминов?

    • IoC (Inversion of Control) — принцип, при котором контроль над созданием и управлением объектами передается контейнеру.
    • DI (Dependency Injection) — это инициализация полей объекта другими объектами.
---
---

9. Перечислите способы внедрения зависимостей и объясните их отличия друг от друга.

    • Конструкторное внедрение: Зависимости передаются через конструктор. Преимущества: неизменяемость полей, возможность тестирования.
    • Сеттерное внедрение: Зависимости передаются через сеттеры. Преимущества: гибкость конфигурации, возможность изменения зависимостей.
    • Поле: Зависимости внедряются напрямую в поля с помощью аннотаций. Преимущества: простота, но снижает тестируемость и управляемость.

10. Что такое фабрика бинов (BeanFactory)?
    `BeanFactory` — это базовый интерфейс контейнера IoC (Inversion of Control) в Spring, который обеспечивает механизм управления бинами.
    Он представляет собой основу для более сложных контейнеров, таких как `ApplicationContext`.
    Основная роль `BeanFactory` заключается в создании и управлении экземплярами бинов, а также в разрешении их зависимостей.
---
---

11. Что такое ApplicationContext? Когда он создается?

    `ApplicationContext` — это интерфейс в Spring, который расширяет возможности `BeanFactory`, предоставляя дополнительные функции и услуги для построения сложных приложений.
    Он является центральным интерфейсом для работы с контейнером IoC (Inversion of Control) в Spring.
    Создается при старте приложения
---
---

12. С какой целью выполняется конфигурирование контекста, какими способами это конфигурирование может производиться и какие отличия есть между ними.

Цели конфигурирования контекста

    1. Управление зависимостями (Dependency Management): Обеспечение автоматического связывания зависимостей между объектами.
    2. Жизненный цикл бинов (Bean Lifecycle): Управление процессами создания, инициализации и уничтожения бинов.
    3. Настройка параметров (Configuration Parameters): Задание параметров конфигурации для различных аспектов приложения.
    4. Разделение конфигурации и логики (Separation of Configuration and Logic): Позволяет отделить настройки и зависимости от бизнес-логики приложения, делая код более модульным и управляемым.
    5. Масштабируемость и гибкость (Scalability and Flexibility): Обеспечение возможности легко изменять и настраивать компоненты приложения по мере роста и изменения требований.

XML-based configuration
Annotation-based configuration
Java-based configuration
---
---

13. Что такое бины Singleton и Prototype в Spring, и в чем разница между ними?

Singleton — это режим по умолчанию для бинов в Spring. В этом режиме контейнер Spring создает только один экземпляр бина для каждого определенного бина в контейнере.
    • Этот единственный экземпляр используется для всех запросов на внедрение зависимости.

Prototype — это режим, при котором контейнер Spring создает новый экземпляр бина при каждом запросе на внедрение зависимости.
    • Каждый раз, когда бин запрашивается из контейнера, создается новый экземпляр.

Разница между Singleton и Prototype

1. Количество экземпляров:
    • Singleton: Один экземпляр на контейнер Spring.
    • Prototype: Новый экземпляр при каждом запросе.

2. Жизненный цикл:
    • Singleton: Контейнер управляет полным жизненным циклом бина, от создания до уничтожения.
    • Prototype: Контейнер управляет созданием, но не управляет уничтожением или последующими действиями.

3. Использование:
    • Singleton: Подходит для состояния, общего для всего приложения, или для бинов, которые не зависят от специфического состояния.
    • Prototype: Подходит для состояния, уникального для каждого использования, или для бинов с коротким сроком жизни.
---
---

14. Как управлять транзакциями в Spring? Объясните использование аннотации @Transactional.

Этой аннотацией обозначают или метод или класс которым необходимо транзакционное управление

Если обозначен только метод - то будет только метод
Если класс - все методы класса
У Transactional есть атрибуты:
    1. propagation:
    • Определяет поведение транзакции в отношении существующих транзакций.
    2. isolation:
    • Определяет уровень изоляции транзакции.
    3. timeout:
    • Устанавливает время ожидания завершения транзакции в секундах.
    4. readOnly:
    • Указывает, что транзакция только для чтения.
    5. rollbackFor и noRollbackFor:
    • Определяет, при каких исключениях нужно откатывать транзакцию.
---
---

15. Объясните различия между использованием Java Config и XML Config для определения бинов. В каких случаях предпочтительно использовать один способ перед другим?

    XML Config - полностью отдельный XML файл
    Java Config - использует аннотацию Configuration

Когда использовать Java Config:

    1. Небольшие проекты: Для небольших проектов, где конфигурация относительно проста, Java Config обеспечивает легкость и скорость разработки.
    2. Современные проекты: Современные проекты, использующие Spring Boot, по умолчанию используют Java Config.
    3. Интенсивное использование DI: В проектах с интенсивным использованием Dependency Injection Java Config обеспечивает лучшую поддержку и читаемость.
    4. Динамическая конфигурация: Если конфигурация зависит от условий выполнения, Java Config позволяет использовать возможности языка Java для создания динамических конфигураций.

Когда использовать XML Config:

    1. Большие корпоративные проекты: В крупных проектах, где конфигурация может быть очень сложной и изменяемой независимо от кода.
    2. Проекты с разными командами: В проектах, где конфигурация и разработка кода выполняются разными командами, XML может быть более удобным для управления.
    3. Унаследованные проекты: В проектах, которые уже используют XML Config и где изменение на Java Config требует значительных затрат времени и ресурсов.
    4. Интеграция с другими системами: В случаях, когда требуется интеграция с системами, использующими XML для обмена конфигурациями.
---
---

16. Что такое ленивое создание (lazy initialization) бинов в Spring, и как его настроить?

Бин будет создан и инициализирован контейнером Spring только тогда, когда он впервые потребуется, а не при старте приложения.

1) На уровне класса или метода @Lazy
2) На уровне зависимости
```java
public MyService(@Lazy MyLazyBean myLazyBean) {
	this.myLazyBean = myLazyBean;
}
```
3) XML-конфигурация
```xml
<bean id="myLazyBean" class="com.example.MyLazyBean" lazy-init="true"/>
```

4) глобальная настройка
java
```java
@Configuration
@Lazy
public class AppConfig {
    // Здесь можно определить бины
}
```
xml
```xml
<beans default-lazy-init="true">
     <!-- Здесь можно определить бины -->
</beans>
```

##### Конфигурация и профили

17. Где и для чего применяются аннотации @Configuration, @ComponentScan, @PropertySource. Что в них должно быть указано?

    • @Configuration: Используется для обозначения классов, которые определяют бины в Spring-контексте.
    • @ComponentScan: Определяет, где Spring должен искать компоненты для автоматического создания бинов и регистрациив контексте.
    • @PropertySource: Указывает на файл свойств, содержащий конфигурационные параметры для приложения.

18. Можно ли использовать несколько конфигурационных файлов? Если да, то как это сделать? Если нет, то почему?

    1. Использование аннотации @Import
    2. Комбинирование Java и XML конфигураций
        1. @ImportResource("classpath:app-config.xml")
    3. Использование XML конфигураций для импорта других конфигурационных файлов
        1. ```xml
        <beans>
                <import resource="classpath:data-config.xml"/>
                <import resource="classpath:service-config.xml"/>
                <bean id="mainBean" class="com.example.MainBean"/>
        </beans>
           ```
---
---

19. Какую роль играют профили (Profiles) в Spring, и как их использовать?
    • Разделение конфигураций: Профили позволяют разделять конфигурации для различных сред (например, dev, test, prod).
    • Упрощение управления окружением: Легкость переключения между разными конфигурациями без изменения кода.
    • Изоляция настроек: Изоляция специфичных для окружения настроек, таких как базы данных, API ключи, логирование и т.д.

    в файле с аннотацией @Configuration можно добавить @Profile с указанием профиля
---
---

20. Что такое Spring Profiles и как они помогают в управлении конфигурацией?

*Spring Profiles* — это механизм в Spring Framework, который позволяет изолировать и управлять конфигурацией приложения для разных сред (например, разработка, тестирование, производство).

    1. Разделение конфигураций для разных сред:
        • Spring Profiles позволяют определять разные настройки и бины для различных окружений, таких как dev, test, и prod.
        Это позволяет использовать одну и ту же кодовую базу для всех окружений, меняя только конфигурацию.

    2. Изоляция окружения:
        • Позволяет изолировать конфигурацию, специфичную для окружения, такую как URL базы данных, учетные данные, параметры кеширования и другие настройки, которые могут различаться между окружениями.

    3. Упрощение развертывания:
        • С профилями можно легко переключаться между различными конфигурациями, что упрощает процесс развертывания и настройки приложения для разных сред.

    4. Гибкость и масштабируемость:
        • Профили обеспечивают гибкость и масштабируемость, позволяя добавлять новые среды и соответствующие конфигурации без изменений основной логики приложения.
---
---

21. Как настроить Spring приложение для работы с JPA и Hibernate?

    1) добавить зависимости в мавен
    2) настроить параметры подключения в application.properties или application.yml
    3) создать классы сущностей, аннотированные @Entity
---
---

22. Что такое аннотация @Scope и какие типы скоупов поддерживает Spring?

    Область применения бина. Это необязательное свойство. Если его не указать явно, контейнер создаст этот бин как singleton.
    Мы можем изменить его, указав свойство как prototype.
    Отличие между ними в следующем: если бин объявлен как singleton, то он создается в контексте в одном экземпляре, и на все запросы контекст вернет единственный экземпляр бина.
    Если же бин объявлен как prototype, то на каждый запрос будет создан новый экземпляр и контекст будет возвращать каждый раз новый экземпляр этого бина.

Основные типы областей видимости (скоупов), поддерживаемые Spring

    1. singleton
    2. prototype
    3. request
    4. session
    5. application
    6. websocket
---
---

23. Как настроить и использовать Property Placeholder в Spring?

    Создать файл настроек application.properties или application.yml в src/main/resources
    в бин внедряется через аннотацию @Value
    Если есть дополнительные файлы настроек нужно использовать аннотацию @PropertySource
    Также можете использовать интерфейс Environment

##### Жизненный цикл и пост-процессоры

24. Опишите жизненный цикл Spring Bean. Каким образом можно изменять этот жизненный цикл?

Этапы жизненного цикла Spring Bean

    1. Создание экземпляра (Instantiation):
    2. Внедрение зависимостей (Dependency Injection):
    3. Обработка Aware интерфейсов:
    4. Пост-обработка бина (Bean Post-Processing):
    5. Инициализация бина (Initialization):
    6. Использование бина (Usage):
    7. Уничтожение бина (Destruction):

Способы изменения жизненного цикла Spring Bean

    1. Реализация интерфейсов InitializingBean и DisposableBean:
        • afterPropertiesSet() — метод из интерфейса InitializingBean, который вызывается после того, как все свойства бина установлены.
        • destroy() — метод из интерфейса DisposableBean, который вызывается при уничтожении бина.

    2. Указание методов инициализации и уничтожения в конфигурации:
        • Укажите методы инициализации и уничтожения в конфигурации бина с использованием аннотаций или XML-конфигурации.

    3. Использование аннотаций @PostConstruct и @PreDestroy:
        • @PostConstruct — метод, помеченный этой аннотацией, будет вызван после того, как бин будет создан и его зависимости будут внедрены.
        • @PreDestroy — метод, помеченный этой аннотацией, будет вызван перед уничтожением бина контейнером Spring.

    4. Использование интерфейса BeanPostProcessor:
        • postProcessBeforeInitialization — вызывается перед инициализацией бина.
        • postProcessAfterInitialization — вызывается после инициализации бина.
---
---

25. Опишите предназначение каждого этапа жизненного цикла бина.

    1. Создание экземпляра (Instantiation):
        • Создание объекта бина контейнером Spring.

    2. Внедрение зависимостей (Dependency Injection):
        • Внедрение необходимых зависимостей в бин.

    3. Обработка Aware интерфейсов:
        • Позволяет бину получить доступ к ресурсам контейнера (например, BeanNameAware, BeanFactoryAware).

    4. Пост-обработка бина (Bean Post-Processing):
        • Выполнение дополнительных действий до и после инициализации бина (через BeanPostProcessor).

    5. Инициализация бина (Initialization):
        • Выполнение методов инициализации, таких как afterPropertiesSet() (если реализован InitializingBean), методы, указанные в init-method, или методы, аннотированные @PostConstruct.

    6. Использование бина (Usage):
        • Бин готов к использованию в приложении.

    7. Уничтожение бина (Destruction):
        • Выполнение методов уничтожения, таких как destroy() (если реализован DisposableBean), методы, указанные в destroy-method, или методы, аннотированные @PreDestroy.
---
---

26. Что такое метод post-processors в Spring? Объясните различие между BeanPostProcessor и BeanFactoryPostProcessor.

    Используются для выполнения дополнительной логики до и после определенных этапов жизненного цикла бинов или фабрики бинов.
    Основные различия между BeanPostProcessor и BeanFactoryPostProcessor

    1. Этап жизненного цикла:
        • BeanPostProcessor: Выполняет операции на уровне экземпляров бинов, перед и после их инициализации.
        • BeanFactoryPostProcessor: Выполняет операции на уровне метаданных (определений) бинов, до их создания и инициализации.

    2. Область применения:
        • BeanPostProcessor: Применяется ко всем бинам после их создания.
        • BeanFactoryPostProcessor: Применяется ко всем определениям бинов в фабрике бинов.

    3. Цель:
        • BeanPostProcessor: Используется для настройки или проверки экземпляров бинов.
        • BeanFactoryPostProcessor: Используется для настройки или изменения конфигурации фабрики бинов.

    4. Время вызова:
        • BeanPostProcessor: Вызывается для каждого бина перед и после его инициализации.
        • BeanFactoryPostProcessor: Вызывается один раз после загрузки всех определений бинов, но до создания любых бинов.
---
---

27. Как работает механизм событий (Events) в Spring? Приведите примеры использования.

    1. События (Events)
    2. Издатели (Publishers)
    3. Подписчики (Listeners)

Например уведомление о завершении какой-то долгой обработки.

##### Аспектно-ориентированное программирование (AOP)

28. Что такое AOP и для чего используется модуль Spring AOP.
    AOP - это парадигма программирования, основанная на идее разделения основного и служебного функционала.
    Выделение служебной логики в отдельные объекты
---
---

29. Назовите основные аннотации, используемые в модуле AOP.
    @EnableAspectJAutoProxy
    @Aspect
    @Before
    @AfterReturning
---
---

30. Как подключить AOP к проекту?
    1. Добавили зависимость spring-aspects в pom.xml и аннотацию @EnableAspectJAutoProxy в конфигурационный класс Config.java, тем самым
    подключили и активировали механизм аспектов.
    2. Создали новый класс и объявили перед ним аннотацию @Aspect. Затем внедрили этот класс в контекст фреймворка, используя стереотипную аннотацию @Component.
    3. Определили конкретные методы, в которых будет реализована логика аспектов, и с помощью аннотаций @Before (а также @AfterReturning)
    сообщили фреймворку Srping, когда и какие целевые методы (то есть методы с бизнес-логикой) следует перехватить.
    4. Реализовали саму логику аспектов.
---
---

31. Что означает термин "Аспект" в парадигме AOP?
    Это модуль, который содержит функции, пересекающиеся с основной логикой приложения. Аспекты позволяют разделять такие
    пересекающиеся задачи, как логирование, управление транзакциями и безопасность, от основной бизнес-логики, улучшая модульность и управляемость кода.
---
---

32. Что означает термин "advice" (совет) в парадигме AOP?
    Конкретный код, который выполняется в определенный момент (до, после или вокруг выполнения метода).
---
---

34. Какие бывают виды advice? В чем их отличие друг от друга?
    •   Before: до выполнения метода
	•	After (Finally): после выполнения метода, независимо от результата
	•	After Returning: после успешного выполнения метода
	•	After Throwing: при выбросе исключения
	•	Around: оборачивает выполнение метода, контролируя его до и после выполнения
---
---

35. Что такое PointCut?
	выражение, определяющее, когда и где должен применяться advice, пакет
---
---

36. Что такое JoinPoint в AOP?
    Точка в выполнении программы, где может быть применен аспект (например, вызов метода - execution).
---
---

37. Как написать собственный аспект (aspect) в Spring AOP?
    Создать класс, в котором указать аннтотации @Aspect и @Before или @After
---
---

38. Что такое аннотация @Aspect, и как она используется?
	Специальная аннотация, указывающая на то что далее будут идти advise
---
---

39. Объясните, что такое метод interception и как он реализуется в Spring AOP.
    Это техника, которая позволяет перехватывать вызовы методов и выполнять дополнительный код до, после или вокруг вызова целевого метода.
    Делается с помощью аспектов, pointcut выражений и advice методов.
---
---

40. Опишите, каким образом происходит работа Spring при использовании модуля AOP.
    Spring AOP работает путем создания прокси-объектов, которые перехватывают вызовы методов, определенные в pointcut выражениях,
    и выполняют advice до, после или вокруг этих вызовов.

##### Аннотации и их использование

40. Какие аннотации являются стереотипными? Почему они имеют такое название? Какие особенности в поведение бина они привносят?
    @Component

	• Общая аннотация для обозначения класса как Spring-компонента, который будет управляться контейнером Spring.
	• Сканирование компонентов: Классы, аннотированные @Component, автоматически обнаруживаются и регистрируются в контексте Spring при сканировании классов.

	@Service

	• Специализация @Component: Указывает, что класс выполняет сервисные операции или бизнес-логику.
	• Семантическое назначение: Показывает, что класс выполняет бизнес-логику, что помогает в логической организации кода.
	• Транзакции: Часто используется в сочетании с аннотацией @Transactional для управления транзакциями.

	@Repository

	• Специализация @Component: Указывает, что класс отвечает за доступ к данным и взаимодействие с базой данных.
	• Перевод исключений: Автоматически переводит исключения, связанные с базой данных, в исключения Spring DataAccessException.
	• Семантическое назначение: Указывает, что класс отвечает за взаимодействие с базой данных, что помогает в логической организации кода.

	@Controller

	• Специализация @Component: Указывает, что класс является контроллером в Spring MVC.
	• Обработка HTTP-запросов: Классы, аннотированные @Controller, используются для обработки входящих HTTP-запросов и возврата веб-ответов.
	• Маршрутизация: В сочетании с аннотацией @RequestMapping определяет маршруты для методов контроллера.

	@RestController

	• Комбинация @Controller и @ResponseBody: Указывает, что класс является контроллером, который возвращает данные в виде JSON или XML.
	• Упрощение разработки RESTful сервисов: Автоматически сериализует возвращаемые объекты в JSON или XML, упрощая создание RESTful веб-сервисов.
	• Обработка HTTP-запросов: Так же, как и @Controller, используется для обработки HTTP-запросов, но с автоматическим добавлением @ResponseBody ко всем методам.

	Так называются потому что они обозначают типичные роли компонентов в приложении
---
---

41. Объясните для чего используются аннотации @Autowired, @Qualifier, @Primary, @Resource. Когда какую нужно использовать?
    • @Autowired: Автоматическое внедрение зависимостей.
	• @Qualifier: Уточнение, какой бин внедрять при наличии нескольких.
	• @Primary: Определение предпочтительного бина.
	• @Resource: Внедрение по имени или типу
---
---

42. Объясните разницу между @Controller и @RestController в Spring MVC.
    1.	Тип ответа:
    	•	@Controller: Возвращает представления (views), такие как JSP, Thymeleaf, и может возвращать данные через @ResponseBody.
    	•	@RestController: Автоматически возвращает данные (обычно JSON или XML) в теле HTTP-ответа.
    2.	Сериализация:
    	•	@Controller: Нужно явно использовать @ResponseBody, чтобы вернуть данные напрямую.
    	•	@RestController: Все методы автоматически возвращают данные напрямую без необходимости использования @ResponseBody.
    3.	Основное использование:
    	•	@Controller: Подходит для традиционных веб-приложений с HTML-страницами.
    	•	@RestController: Идеален для создания RESTful API.
---
---

##### Дополнительные возможности Spring

43. Какие существуют способы обработки исключений в Spring?
    1. Перехват исключений в методах контроллера с помощью @ExceptionHandler.
	2. Использование аннотации @ControllerAdvice для глобальной обработки исключений.
	3. Использование @ResponseStatus для сопоставления исключений с HTTP-статусами.
	4. Реализация интерфейса HandlerExceptionResolver для пользовательской обработки исключений.
	5. Использование ResponseEntityExceptionHandler для обработки исключений в REST-контроллерах.
---
---

44. Что такое Spring Expression Language (SpEL), и где она используется?
    SpEL предоставляет возможности для динамического вычисления значений, обращения к свойствам, вызова методов, работы с коллекциями и массивами, а также интеграции с контекстом Spring.
    используется в аннотациях
---
---

45. Как работает механизм кэширования в Spring? Объясните использование аннотаций @Cacheable и @CacheEvict.
	1. Активация кэширования:
	• Кэширование активируется в приложении с помощью аннотации @EnableCaching в конфигурационном классе.
	Эта аннотация включает инфраструктуру кэширования в Spring, позволяя использовать аннотации для управления кэшированием.

	2. Конфигурация кэш-менеджера:
	• Для управления кэшами используется интерфейс CacheManager. Spring предоставляет несколько реализаций CacheManager, таких как ConcurrentMapCacheManager, EhCacheCacheManager, HazelcastCacheManager, RedisCacheManager и другие.
	Выбор конкретного CacheManager зависит от требований приложения и используемой технологии кэширования.

	3. Аннотации для управления кэшированием:
	• Spring предоставляет несколько аннотаций для управления кэшированием методов. Эти аннотации позволяют автоматически кэшировать результаты методов, обновлять кэш и удалять данные из кэша.

	4. Применение кэширования к методам:
	• Аннотации, такие как @Cacheable, @CachePut, @CacheEvict, и @Caching, используются для применения кэширования к методам.

	@Cacheable: Аннотирует методы, результаты которых должны быть кэшированы.
	@CacheEvict: Удаляет данные из кэша.
---
---

46. Что такое Spring FactoryBean, и как его использовать?
    это специальный интерфейс в Spring, который позволяет настраивать и управлять созданием сложных объектов.
    Он позволяет создавать бины, которые требуют нестандартной инициализации или конфигурации, предоставляя гибкость в управлении процессом создания объектов.

    Нужно имплементировать интерфейс и переопределить 3 метода getObject(), getObjectType(), isSingleton()
---
---

47. Как обеспечить безопасность в Spring приложениях? Объясните использование Spring Security.
    Основные функции Spring Security

    1. Аутентификация: Проверка подлинности пользователя.
    2. Авторизация: Определение прав доступа пользователя к ресурсам.
    3. Защита веб-приложений: Обеспечение безопасности HTTP-запросов, защита от CSRF, XSS и других атак.
    4. Интеграция с различными хранилищами пользователей: LDAP, база данных, в памяти.
    5. Расширяемость и настраиваемость: Возможность создания собственных механизмов аутентификации и авторизации.

    Основные компоненты Spring Security

    1. SecurityConfig: Конфигурационный класс, где настраиваются правила безопасности.
    2. UserDetailsService: Интерфейс для загрузки пользовательских данных.
    3. PasswordEncoder: Интерфейс для шифрования паролей.
    4. AuthenticationProvider: Интерфейс для проверки подлинности пользователя.
    5. GrantedAuthority: Интерфейс для представления прав доступа.
---
---

48. Как интегрировать Spring с внешними библиотеками и фреймворками?
	добавить зависимость, настроить параметры
---
---

49. Как работать с конфигурацией среды в Spring, используя Spring Cloud?
    1. Создание и настройка Spring Cloud Config Server.
    2. Создание и настройка Spring Cloud Config Client.
    3. Управление конфигурационными файлами.
    4. Использование конфигурации в приложениях.
---
---

50. Что такое Spring Boot, и как он упрощает разработку с использованием Spring?
    это фреймворк для упрощения создания приложений на базе Spring, который предоставляет встроенные функции и автоматическую настройку,
    позволяющие разработчикам быстро и легко создавать готовые к производству приложения.
    Spring Boot значительно упрощает настройку и разработку приложений Spring, устраняя необходимость в обширной конфигурации.
