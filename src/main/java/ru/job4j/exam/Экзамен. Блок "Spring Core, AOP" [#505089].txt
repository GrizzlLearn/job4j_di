##### Основы Spring и его компоненты

**1. Что такое Spring? Какие основные задачи выполняет этот фреймворк?**

Spring — это мощный, комплексный фреймворк для разработки приложений на языке Java. Его основными задачами являются:

• Обеспечение контейнера для управления жизненным циклом объектов (бинов).

• Реализация внедрения зависимостей (Dependency Injection, DI), что упрощает создание и тестирование приложений.

• Поддержка аспектно-ориентированного программирования (AOP) для разделения кода на аспекты, такие как логирование и управление транзакциями.

• Обеспечение абстракций для доступа к данным и управления транзакциями.

• Интеграция с различными технологиями и фреймворками.
---
---

**2. Перечислите основные модули Spring фреймворка.**

Основные модули Spring включают:

• **Spring Core**: Основные компоненты, такие как IoC Container и BeanFactory.

• **Spring AOP**: Поддержка аспектно-ориентированного программирования.

• **Spring Data**: Упрощает доступ к данным и работу с JPA, JDBC и другими технологиями.

• **Spring MVC**: Поддержка Model-View-Controller архитектуры для веб-приложений.

• **Spring Security**: Обеспечение безопасности приложений.

• **Spring Boot**: Автоматическая конфигурация и быстрое создание готовых к использованию приложений.

• **Spring Cloud**: Инструменты для разработки распределенных систем и микросервисов.
---
---

**3. Что такое Spring Bean?**

Spring Bean — это объект, который инициализируется, настраивается и управляется контейнером IoC (Inversion of Control) Spring.
---
---

**4. Когда необходимо объект делать бином?**

Объект нужно делать бином, когда он должен управляться контейнером Spring, то есть его жизненный цикл, конфигурация и зависимости будут контролироваться фреймворком.
---
---

**5. Какие существуют способы создания бинов? Чем они друг от друга отличаются?**

Есть **три** варианта.

**XML-based configuration**. В этом случае конфигурация описывается в **xml**\-файле, код java-классов получается отделен от фреймворка - в них нет ни аннотаций, ни иных указаний на Spring. Этот вариант конфигурирования применялся с самого начала возникновения Spring и сейчас считается устаревшим.

**Annotation-based** **configuration**. В этом случае конфигурация описывается в **xml**\-файле, но <u><i>часть бинов может быть описана</i></u> стереотипными аннотациями в java-коде, и в xml-файле указываются пакеты, в которых эти классы находятся.

**Java-based configuration**. Это современный подход, в котором <u><i>отсутствует конфигурационный xml-файл</i></u>, а вся конфигурация контекста описывается **аннотациями в java-коде** классов. 
---
---

**6. Опишите стратегию нейминга (присвоения имени бину) в Spring.**

Имя бину присваивается автоматически на основе класса (имя класса с первой маленькой буквой) или явно с помощью аннотаций @Component(“customName”) или @Bean(“customName”).
---
---

**7. Каким образом можно самостоятельно присвоить имя бину?**

Имя бину можно присвоить с помощью аннотаций:

• @Component(“customName”)

• @Service(“customName”)

• @Repository(“customName”)

• @Controller(“customName”)

• @Bean(“customName”) в конфигурационном классе.
---
---
